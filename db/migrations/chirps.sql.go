// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createChirps = `-- name: CreateChirps :one
INSERT INTO chirps (body, user_id)
VALUES ($1, $2)
RETURNING id, body, user_id, created_at, updated_at
`

type CreateChirpsParams struct {
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateChirps(ctx context.Context, arg CreateChirpsParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirps, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChrips = `-- name: DeleteChrips :execresult
DELETE FROM chirps
WHERE id = $1
    AND user_id = $2
`

type DeleteChripsParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteChrips(ctx context.Context, arg DeleteChripsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteChrips, arg.ID, arg.UserID)
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT id,
    body,
    user_id,
    created_at,
    updated_at
FROM chirps
ORDER BY created_at ASC
`

func (q *Queries) GetAllChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirps = `-- name: GetChirps :one
SELECT id,
    body,
    user_id,
    created_at,
    updated_at
FROM chirps
WHERE id = $1
`

func (q *Queries) GetChirps(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirps, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChirpyWithUserID = `-- name: GetChirpyWithUserID :many
SELECT id,
    body,
    user_id,
    created_at,
    updated_at
FROM chirps
WHERE user_id = $1
`

func (q *Queries) GetChirpyWithUserID(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirpyWithUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
