// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_token (token, expires_at, revoke_at, user_id)
VALUES ($1, $2, $3, $4)
RETURNING token, created_at, updated_at, expires_at, revoke_at, user_id
`

type CreateRefreshTokenParams struct {
	Token     string        `json:"token"`
	ExpiresAt time.Time     `json:"expires_at"`
	RevokeAt  sql.NullTime  `json:"revoke_at"`
	UserID    uuid.NullUUID `json:"user_id"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.ExpiresAt,
		arg.RevokeAt,
		arg.UserID,
	)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokeAt,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (created_at, updated_at, email, hashed_password)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateUserParams struct {
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token,
    expires_at,
    revoke_at,
    user_id
FROM refresh_token
WHERE token = $1
`

type GetRefreshTokenRow struct {
	Token     string        `json:"token"`
	ExpiresAt time.Time     `json:"expires_at"`
	RevokeAt  sql.NullTime  `json:"revoke_at"`
	UserID    uuid.NullUUID `json:"user_id"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.Token,
		&i.ExpiresAt,
		&i.RevokeAt,
		&i.UserID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT id,
    email,
    hashed_password,
    created_at,
    updated_at
FROM users
WHERE email = $1
`

type GetUsersRow struct {
	ID             uuid.UUID `json:"id"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) GetUsers(ctx context.Context, email string) (GetUsersRow, error) {
	row := q.db.QueryRowContext(ctx, getUsers, email)
	var i GetUsersRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
